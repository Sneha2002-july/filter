import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.FlowLayout;
import java.awt.event.ItemEvent;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;

import com.HIS.Controller.DoctorTableModel;

public class BrowserPanel extends JPanel {
    JTable doctorTable;

    public BrowserPanel(CardLayout cardLayout, JPanel container, DoctorTableModel tableModel, JTable doctorTable) {
        setLayout(new BorderLayout(10, 10));
        setBorder(BorderFactory.createTitledBorder("Doctor Browser"));

        JScrollPane scrollPane = new JScrollPane(doctorTable);
        add(scrollPane, BorderLayout.CENTER);

        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));

        // Name Filter
        searchPanel.add(new JLabel("Name:"));
        JTextField nameSearchField = new JTextField(15);
        searchPanel.add(nameSearchField);

        // Department Filter (No default value)
        searchPanel.add(new JLabel("Department:"));
        JComboBox<String> departmentDropdown = new JComboBox<>();
        departmentDropdown.addItem(""); // Add empty item initially
        for (String department : tableModel.getDepartments()) {
            departmentDropdown.addItem(department);
        }
        searchPanel.add(departmentDropdown);

        // Specialization Filter
        searchPanel.add(new JLabel("Specialization:"));
        JComboBox<String> specializationDropdown = new JComboBox<>();
        specializationDropdown.setEnabled(false);
        searchPanel.add(specializationDropdown);

        // Populate specialization based on selected department
        departmentDropdown.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                String selectedDepartment = (String) e.getItem();
                specializationDropdown.removeAllItems();

                if (selectedDepartment == null || selectedDepartment.isEmpty()) {
                    specializationDropdown.setEnabled(false);
                } else {
                    String[] specializations = tableModel.getSpecializationsByDepartment(selectedDepartment);
                    if (specializations != null) {
                        specializationDropdown.setEnabled(true);
                        for (String specialization : specializations) {
                            specializationDropdown.addItem(specialization);
                        }
                    } else {
                        specializationDropdown.setEnabled(false);
                    }
                }
            }
        });

        // Search Button
        JButton searchButton = new JButton("Search");
        searchButton.addActionListener(e -> {
            String nameQuery = nameSearchField.getText().trim().toLowerCase();
            String departmentQuery = (String) departmentDropdown.getSelectedItem();
            String specializationQuery = (String) specializationDropdown.getSelectedItem();

            tableModel.filterDoctors(nameQuery, departmentQuery, specializationQuery);
        });

        // Reset Button
        JButton resetButton = new JButton("Reset");
        resetButton.addActionListener(e -> {
            nameSearchField.setText("");
            departmentDropdown.setSelectedIndex(0);
            specializationDropdown.setEnabled(false);
            specializationDropdown.removeAllItems();
            tableModel.resetFilter();
        });

        searchPanel.add(searchButton);
        searchPanel.add(resetButton);
        add(searchPanel, BorderLayout.NORTH);

        // Navigation Button
        JButton goToProfileButton = new JButton("Go to Profile Page");
        goToProfileButton.addActionListener(e -> cardLayout.show(container, "Profile"));
        add(goToProfileButton, BorderLayout.SOUTH);
    }
}
